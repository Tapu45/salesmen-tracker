// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manager {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  User             SalesMan[]
  ManagedLocations ManagedLocation[]
  AssignSalesman   AssignSalesman[]
}

enum SalesManType {
  VANSALES
  PRESELLER
  MERCHANDISER
}

model SalesMan {
  id           Int          @id @default(autoincrement())
  name         String
  uid          String       @unique
  phone        String?
  canLogin     Boolean      @default(true)
  salesManType SalesManType

  managerId Int
  Manager   Manager @relation(fields: [managerId], references: [id], onDelete: Cascade)

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  visitedLocations VisitedLocation[]
  AssignSalesman   AssignSalesman[]
}

enum StoreType {
  RETAILER
  DISTRIBUTOR
  WHOLESALER
}

model ManagedLocation {
  id          Int       @id @default(autoincrement())
  name        String
  market_name String
  address     String
  latitude    Float
  longitude   Float
  region      String
  state       String
  storeType   StoreType

  managerId Int
  Manager   Manager @relation(fields: [managerId], references: [id], onDelete: Cascade)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  VisitedLocation VisitedLocation[]
  AssignSalesman  AssignSalesman[]
}

model VisitedLocation {
  id            Int             @id @default(autoincrement())
  date          DateTime
  locationId    Int
  Location      ManagedLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  UserLatitude  Float
  UserLongitude Float
  scanDistance  Float
  visitCount    Int             @default(0)

  salesManId Int
  SalesMan   SalesMan @relation(fields: [salesManId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AssignSalesman {
  id        Int     @id @default(autoincrement())
  managerId Int
  Manager   Manager @relation(fields: [managerId], references: [id], onDelete: Cascade)

  salesManId Int
  SalesMan   SalesMan        @relation(fields: [salesManId], references: [id], onDelete: Cascade)
  locationId Int
  Location   ManagedLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
